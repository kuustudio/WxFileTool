// WxFileToolPanel.cpp : 实现文件
//

#include "stdafx.h"
#include "WxFileTool.h"
#include "WxFileToolPanel.h"
#include "afxdialogex.h"
#include"Lock.h"


// WxFileToolPanel 对话框

IMPLEMENT_DYNAMIC(WxFileToolPanel, CDialogEx)

WxFileToolPanel::WxFileToolPanel(CWnd* pParent /*=NULL*/)
	: CDialogEx(WxFileToolPanel::IDD, pParent)
	, dwServerIp(0)
	, dwPort(0)
	, dwUin(0)
	, dwSafecdnuin(0)
	, strVer(_T(""))
	, dwSeq(0)
	, dwClientVersion(0)
	, strOsType(_T(""))
	, strNetType(_T(""))
	, strAcceptdupack(_T(""))
	, mLog(_T(""))
{

}

WxFileToolPanel::~WxFileToolPanel()
{
}

void WxFileToolPanel::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_IPAddress(pDX, IDC_IPADDRESS1, dwServerIp);
	DDX_Text(pDX, IDC_EDIT1, dwPort);
	DDX_Text(pDX, IDC_EDIT2, dwUin);
	DDX_Text(pDX, IDC_EDIT3, dwSafecdnuin);
	DDX_Text(pDX, IDC_EDIT4, strVer);
	DDX_Text(pDX, IDC_EDIT5, dwSeq);
	DDX_Text(pDX, IDC_EDIT6, dwClientVersion);
	DDX_Text(pDX, IDC_EDIT7, strOsType);
	DDX_Text(pDX, IDC_EDIT8, strNetType);
	DDX_Text(pDX, IDC_EDIT9, strAcceptdupack);
	DDX_Text(pDX, IDC_EDIT11, mLog);
}


BEGIN_MESSAGE_MAP(WxFileToolPanel, CDialogEx)
	ON_BN_CLICKED(IDC_BUTTON3, &WxFileToolPanel::OnBnClickedButton3)
	ON_BN_CLICKED(IDC_BUTTON4, &WxFileToolPanel::OnBnClickedButton4)
	ON_MESSAGE(WM_UPDATELOGWIN, &WxFileToolPanel::OnUpdatelogwin)
	ON_BN_CLICKED(IDC_BUTTON1, &WxFileToolPanel::OnBnClickedButton1)
	ON_BN_CLICKED(IDC_BUTTON2, &WxFileToolPanel::OnBnClickedButton2)
END_MESSAGE_MAP()


// WxFileToolPanel 消息处理程序


BOOL WxFileToolPanel::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	pMainPanel = this;
	
	//配置初始化
	dwServerIp=0x3A90891C;
	dwPort=443;
	dwUin = 604003962;
	dwSafecdnuin = 1161106911;
	strVer="1";
	dwSeq=53;
	dwClientVersion = 637929273;
	strOsType ="android-26";
	strNetType="1";
	strAcceptdupack="1";
	//HexControl
	pHexControl1 = HexEditControl::ShowHexControlEx(m_hWnd, 25, 125, 550, 80, FALSE, TRUE);
	pHexControl1->SetParent(this);
	unsigned char authkey[] = { 0x30,
		0x43, 0x02, 0x01, 0x01, 0x04, 0x3c, 0x30, 0x3a,
		0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x04,
		0x24, 0x00, 0x5e, 0x7a, 0x02, 0x03, 0x2f, 0x54,
		0x06, 0x02, 0x04, 0x1c, 0x89, 0x90, 0x3a, 0x02,
		0x04, 0xe4, 0x89, 0x90, 0x3a, 0x02, 0x03, 0x3d,
		0x14, 0xba, 0x02, 0x04, 0x1e, 0x8f, 0xfa, 0x3a,
		0x02, 0x04, 0x35, 0x8f, 0xfa, 0x3a, 0x02, 0x04,
		0x5b, 0xe6, 0x41, 0xd0, 0x02, 0x04, 0xac, 0xf4,
		0x5f, 0x16, 0x04, 0x00 };
	HexEditControl::SetData(pHexControl1, authkey, sizeof(authkey));

	pHexControl2 = HexEditControl::ShowHexControlEx(m_hWnd, 25, 240, 550, 250, FALSE, TRUE);
	pHexControl2->SetParent(this);

	UpdateData(FALSE);
	return TRUE;  // return TRUE unless you set the focus to a control
	// 异常:  OCX 属性页应返回 FALSE
}

unsigned int WxFileToolPanel::clientid = -1;
WxFileToolPanel *WxFileToolPanel::pMainPanel = 0;

void __stdcall WxFileToolPanel::NetCallBack(unsigned int _socket, unsigned int msgType, unsigned char* msg, unsigned int bytes)
{
	CLock mLock;
	switch (msgType)
	{
		case 0x0000:
		{
			//新的连接
			WxFileToolPanel::clientid = _socket;
			if (pMainPanel)
			{
				pMainPanel->SendMessage(WM_UPDATELOGWIN, 0x0000, 0);
			}
		} break;
		case 0x0001:
		{
			//接收数据
			pMainPanel->SendMessage(WM_UPDATELOGWIN, 0x0001, 0);
		} break;
		case 0x0002:
		{
			//连接断开
			WxFileToolPanel::clientid = -1;
			if (pMainPanel)
			{
				pMainPanel->SendMessage(WM_UPDATELOGWIN, 0x0002, 0);
			}
		}break;
		default:
		{
		} break;
	}
}


//连接测试
void WxFileToolPanel::OnBnClickedButton3()
{
	// TODO:  在此添加控件通知处理程序代码
	UpdateData(TRUE);
	unsigned int iPortNr=-1;
	unsigned int iMaxNumberOfConnections = 1201;
	unsigned int iNrOfIOWorkers=1;
	unsigned int iNrOfLogicalWorkers=0;
	unsigned int iMaxNrOfFreeBuff=0;
	unsigned int iMaxNrOfFreeContext=0;
	bool bSendInOrder=true;
	bool bReadInOrder=true;
	unsigned int iNrOfPendlingReads=4;
		if (StartTheSystem(iPortNr,
			iMaxNumberOfConnections,
			iNrOfIOWorkers,
			iNrOfLogicalWorkers,
			iMaxNrOfFreeBuff,
			iMaxNrOfFreeContext,
			bSendInOrder,
			bReadInOrder,
			iNrOfPendlingReads))
		{
			CStringA strIP;
			unsigned char *pIP = (unsigned char*)&dwServerIp;
			strIP.Format("%u.%u.%u.%u", *(pIP + 3), *(pIP + 2), *(pIP + 1), *pIP);
			if (OnConnectA((MainCallBack)WxFileToolPanel::NetCallBack, (unsigned char*)strIP.GetBuffer(0), dwPort, 0))
			{
				return;
			}
		}
		AfxMessageBox(L"连接失败");
}


void WxFileToolPanel::OnBnClickedButton4()
{
	// TODO:  在此添加控件通知处理程序代码
	if (WxFileToolPanel::clientid!=-1)
		OnDisconnect(WxFileToolPanel::clientid);
}


afx_msg LRESULT WxFileToolPanel::OnUpdatelogwin(WPARAM wParam, LPARAM lParam)
{
	switch (wParam)
	{
		case 0x0000:
		{
			mLog.Append(L"新连接...\r\n");
		}
		break;
		case 0x0001:
		{
			mLog.Append(L"接收数据...\r\n");
		}break;
		case 0x0002:
		{
			mLog.Append(L"连接断开...\r\n");
		}break;
	}
	UpdateData(FALSE);
	return 0;
}

//构造数据包
void WxFileToolPanel::OnBnClickedButton1()
{
	// TODO:  在此添加控件通知处理程序代码
	unsigned char buffer[] = { 0xAB, 0x00, 0x00, 0x03, 0x03, 0x4E, 0x20, 0x7A, 0x5E, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xEA, 0x00, 0x00, 0x00, 0x03, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x09, 0x77, 0x65, 0x69, 0x78, 0x69, 0x6E, 0x6E, 0x75, 0x6D, 0x00, 0x00, 0x00, 0x09, 0x36, 0x30, 0x34, 0x30, 0x30, 0x33, 0x39, 0x36, 0x32, 0x00, 0x00, 0x00, 0x03, 0x73, 0x65, 0x71, 0x00, 0x00, 0x00, 0x02, 0x35, 0x34, 0x00, 0x00, 0x00, 0x0D, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x09, 0x36, 0x33, 0x37, 0x39, 0x32, 0x39, 0x32, 0x37, 0x33, 0x00, 0x00, 0x00, 0x0C, 0x63, 0x6C, 0x69, 0x65, 0x6E, 0x74, 0x6F, 0x73, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x0A, 0x61, 0x6E, 0x64, 0x72, 0x6F, 0x69, 0x64, 0x2D, 0x32, 0x36, 0x00, 0x00, 0x00, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6B, 0x65, 0x79, 0x00, 0x00, 0x00, 0x45, 0x30, 0x43, 0x02, 0x01, 0x01, 0x04, 0x3C, 0x30, 0x3A, 0x02, 0x01, 0x01, 0x02, 0x01, 0x01, 0x02, 0x04, 0x24, 0x00, 0x5E, 0x7A, 0x02, 0x03, 0x2F, 0x54, 0x06, 0x02, 0x04, 0x1C, 0x89, 0x90, 0x3A, 0x02, 0x04, 0xE4, 0x89, 0x90, 0x3A, 0x02, 0x03, 0x3D, 0x14, 0xBA, 0x02, 0x04, 0x1E, 0x8F, 0xFA, 0x3A, 0x02, 0x04, 0x35, 0x8F, 0xFA, 0x3A, 0x02, 0x04, 0x5B, 0xE6, 0x41, 0xD0, 0x02, 0x04, 0xAC, 0xF4, 0x5F, 0x16, 0x04, 0x00, 0x00, 0x00, 0x00, 0x07, 0x6E, 0x65, 0x74, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x0C, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x64, 0x75, 0x70, 0x61, 0x63, 0x6B, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x06, 0x72, 0x73, 0x61, 0x76, 0x65, 0x72, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x08, 0x72, 0x73, 0x61, 0x76, 0x61, 0x6C, 0x75, 0x65, 0x00, 0x00, 0x00, 0x80, 0xA9, 0xE5, 0x35, 0x69, 0x84, 0xE4, 0x03, 0x0A, 0x39, 0xB9, 0xAA, 0x86, 0xAA, 0x2D, 0x17, 0x95, 0x05, 0xBE, 0x7E, 0x64, 0xAB, 0x89, 0xDB, 0x6D, 0x6A, 0x72, 0x1E, 0x3F, 0xD3, 0xF0, 0x6D, 0xC2, 0x73, 0xD5, 0xF7, 0xCB, 0xC7, 0xAE, 0xAE, 0xA9, 0xB0, 0xD4, 0x41, 0xC2, 0x08, 0xF6, 0xFA, 0x5D, 0xA5, 0x07, 0x33, 0x83, 0xED, 0xE7, 0x62, 0x52, 0x2A, 0x54, 0xC6, 0x41, 0xD8, 0x47, 0x2D, 0x14, 0x20, 0xDF, 0xE5, 0x60, 0x63, 0x97, 0xE4, 0x2B, 0xF6, 0x65, 0x80, 0x2E, 0xA1, 0x7B, 0x15, 0x93, 0x41, 0x2B, 0xC6, 0xC2, 0x94, 0x60, 0x92, 0xFD, 0xA9, 0x2D, 0xC0, 0xE3, 0x50, 0x20, 0x26, 0xDD, 0xA1, 0x06, 0xF0, 0x1C, 0xF6, 0x61, 0x55, 0xB3, 0x0D, 0x49, 0x8C, 0x6A, 0x21, 0x72, 0x31, 0x3E, 0x44, 0xB5, 0xA2, 0x73, 0x73, 0x3E, 0x4F, 0xAD, 0xFA, 0x42, 0xB3, 0x4C, 0x93, 0x4A, 0x37, 0xF8, 0x00, 0x00, 0x00, 0x08, 0x66, 0x69, 0x6C, 0x65, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x01, 0x32, 0x00, 0x00, 0x00, 0x0A, 0x77, 0x78, 0x63, 0x68, 0x61, 0x74, 0x74, 0x79, 0x70, 0x65, 0x00, 0x00, 0x00, 0x01, 0x31, 0x00, 0x00, 0x00, 0x06, 0x66, 0x69, 0x6C, 0x65, 0x69, 0x64, 0x00, 0x00, 0x00, 0xB4, 0x33, 0x30, 0x35, 0x38, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x35, 0x31, 0x33, 0x30, 0x34, 0x66, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x32, 0x30, 0x34, 0x39, 0x32, 0x37, 0x64, 0x32, 0x39, 0x39, 0x62, 0x30, 0x32, 0x30, 0x33, 0x32, 0x66, 0x35, 0x34, 0x63, 0x64, 0x30, 0x32, 0x30, 0x34, 0x39, 0x35, 0x33, 0x64, 0x61, 0x31, 0x37, 0x62, 0x30, 0x32, 0x30, 0x34, 0x35, 0x62, 0x39, 0x37, 0x35, 0x65, 0x32, 0x39, 0x30, 0x34, 0x32, 0x61, 0x37, 0x37, 0x37, 0x38, 0x37, 0x35, 0x37, 0x30, 0x36, 0x63, 0x36, 0x66, 0x36, 0x31, 0x36, 0x34, 0x35, 0x66, 0x33, 0x31, 0x33, 0x37, 0x33, 0x33, 0x33, 0x35, 0x33, 0x35, 0x33, 0x31, 0x33, 0x33, 0x33, 0x31, 0x33, 0x37, 0x33, 0x34, 0x34, 0x30, 0x36, 0x33, 0x36, 0x38, 0x36, 0x31, 0x37, 0x34, 0x37, 0x32, 0x36, 0x66, 0x36, 0x66, 0x36, 0x64, 0x33, 0x37, 0x33, 0x35, 0x33, 0x33, 0x35, 0x66, 0x33, 0x31, 0x33, 0x35, 0x33, 0x33, 0x33, 0x36, 0x33, 0x36, 0x33, 0x34, 0x33, 0x36, 0x33, 0x36, 0x33, 0x39, 0x33, 0x36, 0x30, 0x32, 0x30, 0x34, 0x30, 0x31, 0x30, 0x34, 0x31, 0x38, 0x30, 0x32, 0x30, 0x32, 0x30, 0x31, 0x30, 0x30, 0x30, 0x34, 0x30, 0x30, 0x00, 0x00, 0x00, 0x0B, 0x6C, 0x61, 0x73, 0x74, 0x72, 0x65, 0x74, 0x63, 0x6F, 0x64, 0x65, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x05, 0x69, 0x70, 0x73, 0x65, 0x71, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x09, 0x77, 0x78, 0x6D, 0x73, 0x67, 0x66, 0x6C, 0x61, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x77, 0x78, 0x61, 0x75, 0x74, 0x6F, 0x73, 0x74, 0x61, 0x72, 0x74, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x06, 0x6F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x0B, 0x6C, 0x61, 0x72, 0x67, 0x65, 0x73, 0x76, 0x69, 0x64, 0x65, 0x6F, 0x00, 0x00, 0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x0A, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x66, 0x6C, 0x61, 0x67, 0x00, 0x00, 0x00, 0x01, 0x30, };
	HexEditControl::SetData(pHexControl2, buffer, sizeof(buffer));
}

//发送数据包
void WxFileToolPanel::OnBnClickedButton2()
{
	// TODO:  在此添加控件通知处理程序代码

	unsigned int len = HexEditControl::GetDataLength(pHexControl2);
	if (len)
	{
		unsigned char *buffer= new unsigned char[len];
		HexEditControl::GetData(pHexControl2, buffer, len);
		if (WxFileToolPanel::clientid != -1)
			SendPacket(WxFileToolPanel::clientid, buffer, len);
		delete[]buffer;
	}
}
